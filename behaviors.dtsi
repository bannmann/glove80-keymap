    behaviors {
        parsl: paren_shift_left {
            compatible = "zmk,behavior-mod-morph";
            label = "PAREN_SHIFT_LEFT";
            #binding-cells = <0>;
            bindings = <&kp LSHFT>, <&kp N9>;
            mods = <(MOD_RSFT)>;
            keep-mods = <(MOD_RSFT)>;
        };
        parsr: paren_shift_right {
            compatible = "zmk,behavior-mod-morph";
            label = "PAREN_SHIFT_RIGHT";
            #binding-cells = <0>;
            bindings = <&kp RSHFT>, <&kp N0>;
            mods = <(MOD_LSFT)>;
            keep-mods = <(MOD_LSFT)>;
        };

        // sends the given keycode only if held for at least 100 ms. second keycode is ignored.
        // example use: "Custom" with "&strong PSCRN 0".
        strong: strong-press {
            compatible = "zmk,behavior-hold-tap";
            label = "STRONG_PRESS";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <100>;
            quick-tap-ms = <100>;
            global-quick-tap;
            bindings = <&kp>, <&none>;
        };
    };

    combos { // binding indexes are 0-based
        compatible = "zmk,combos";

        #define COMBO_TIMEOUT 50

        #define COMBO_K2_B1(suffix, k1, k2, b1) \
            combo_##suffix { \
                timeout-ms = <COMBO_TIMEOUT>; \
                key-positions = <k1 k2>; \
                bindings = <b1>; \
            };

        #define COMBO_K2_B2(suffix, k1, k2, b1, b2) \
            combo_##suffix { \
                timeout-ms = <COMBO_TIMEOUT>; \
                key-positions = <k1 k2>; \
                bindings = <b1 b2>; \
            };

        // Horizontal combos
        COMBO_K2_B2(home_hj, 40, 41, &kp, HOME)         // HJ
        COMBO_K2_B2(end_kl, 42, 43, &kp, END)           // KL
        COMBO_K2_B2(cut, 48, 49, &kp, LC(X))            // XC
        COMBO_K2_B2(copy, 49, 50, &kp, LC(C))           // CV
        COMBO_K2_B2(paste, 50, 51, &kp, LC(V))          // VB
        COMBO_K2_B2(undo, 47, 48, &kp, LC(Z))           // ZX
        COMBO_K2_B2(selectall, 35, 36, &kp, LC(A))      // AS
        COMBO_K2_B2(home, 66, 67, &kp, HOME)            // \⯇
        COMBO_K2_B2(end, 67, 68, &kp, END)              // ⯇⯈
        COMBO_K2_B2(enter, 69, 70, &kp, ENTER)          // ⌫⌦
        COMBO_K2_B2(space, 70, 71, &kp, SPACE)          // ⌦⊞
        COMBO_K2_B2(pageup, 75, 76, &kp, PAGE_UP)       // ⯅⯆
        COMBO_K2_B2(pagedown, 76, 77, &kp, PAGE_DOWN)   // ⯆[

        // Vertical combos
        COMBO_K2_B1(az, 35, 47, &xa) // ä or Ä
        COMBO_K2_B1(uj, 29, 41, &xu) // ü or Ü
        COMBO_K2_B1(ol, 31, 43, &xo) // ö or Ö
        COMBO_K2_B1(sx, 36, 48, &xs) // ß or ẞ
        COMBO_K2_B1(ed, 25, 37, &xe) // €
    };

    macros {
        #define SEND_START F19
        #define S0 F20
        #define S1 F21
        #define S2 F22
        #define SEND_STOP F23

        #define SEND3(name, k1, k2, k3) \
            name: name { \
                    label = #name; \
                    compatible = "zmk,behavior-macro"; \
                    #binding-cells = <0>; \
                    wait-ms = <10>; \
                    tap-ms = <10>; \
                    bindings \
                        = <&macro_tap     &kp SEND_START &kp k1 &kp k2 &kp k3 &kp SEND_STOP> \
                        ; \
                };

        // ä and Ä
        SEND3(xa, S0, S0, S0)

        // ö and Ö
        SEND3(xo, S0, S0, S1)

        // ü and Ü
        SEND3(xu, S0, S0, S2)

        // ß and ẞ
        SEND3(xs, S0, S1, S0)

        // €
        SEND3(xe, S0, S1, S1)

        // ×
        SEND3(xx, S0, S1, S2)

        // ❶❷❸❹❺❻❼❽❾⓿
        SEND3(xn1, S0, S2, S0)
        SEND3(xn2, S0, S2, S1)
        SEND3(xn3, S0, S2, S2)
        SEND3(xn4, S1, S0, S0)
        SEND3(xn5, S1, S0, S1)
        SEND3(xn6, S1, S0, S2)
        SEND3(xn7, S1, S1, S0)
        SEND3(xn8, S1, S1, S1)
        SEND3(xn9, S1, S1, S2)
        SEND3(xn0, S1, S2, S0)

        // ⯈⯇⯅⯆
        SEND3(xtr, S1, S2, S1)
        SEND3(xtl, S1, S2, S2)
        SEND3(xtu, S2, S0, S0)
        SEND3(xtd, S2, S0, S1)

        // »«
        SEND3(xdot,   S2, S1, S0)
        SEND3(xcomma, S2, S0, S2)

        // SEND3(free, S2, S1, S1)
        // SEND3(free, S2, S1, S2)
        // SEND3(free, S2, S2, S0)
        // SEND3(free, S2, S2, S1)
        // SEND3(free, S2, S2, S2)
    };